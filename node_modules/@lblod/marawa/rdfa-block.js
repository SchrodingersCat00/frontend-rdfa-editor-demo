"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents a logical block, a combination of one or more RichNodes,
 * that share the same semantic meaning (in terms of RDFa as well as in terms of display).
 *
 * An RDFa block has the following properties:
 * - start, end, region: boundaries of the RDFa block
 * - text: plain text of the region
 * - richNodes: array of leaf richNodes that are combined in this RDFa block
 * - semanticNode: deepest (ancestor) rich node that contains the context of this block
 * - context: array of triples from the top to the semantic node
 * - isRdfaBlock: whether this block can be combined with other blocks (mainly for internal usage).
 *                RDFa blocks cannot be combined if isRdfaBlock == true
 *
 * @module editor-core
 * @class RdfaBlock
 * @constructor
 */
var RdfaBlock = function () {
  function RdfaBlock(content) {
    _classCallCheck(this, RdfaBlock);

    for (var key in content) {
      this[key] = content[key];
    }
  }

  _createClass(RdfaBlock, [{
    key: "isInRegion",
    value: function isInRegion(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          start = _ref2[0],
          end = _ref2[1];

      return start <= this.start && this.end <= end;
    }
  }, {
    key: "isPartiallyInRegion",
    value: function isPartiallyInRegion(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          start = _ref4[0],
          end = _ref4[1];

      return this.start >= start && this.start < end || this.end > start && this.end <= end;
    }
  }, {
    key: "isPartiallyOrFullyInRegion",
    value: function isPartiallyOrFullyInRegion(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          start = _ref6[0],
          end = _ref6[1];

      if (start == undefined || end == undefined) return true;

      return this.start >= start && this.start <= end || this.end >= start && this.end <= end || this.start <= start && end <= this.end;
    }
  }, {
    key: "containsRegion",
    value: function containsRegion(_ref7) {
      var _ref8 = _slicedToArray(_ref7, 2),
          start = _ref8[0],
          end = _ref8[1];

      return this.start <= start && end <= this.end;
    }
    /**
     * Returns the absolute region based on the RDFa block region and a given relative region
     *
     * @method normalizeRegion
     *
     * @param {[int,int]} [start, end] Relative region offsets
     *
     * @return {[int,int]} [start, end] Absolute region offsets
     */

  }, {
    key: "normalizeRegion",
    value: function normalizeRegion(_ref9) {
      var _ref10 = _slicedToArray(_ref9, 2),
          relativeStart = _ref10[0],
          relativeEnd = _ref10[1];

      return [this.start + relativeStart, this.start + relativeEnd];
    }
  }, {
    key: "region",
    get: function get() {
      var start = this.start;
      var end = this.end;

      return [start, end || start];
    },
    set: function set(_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
          start = _ref12[0],
          end = _ref12[1];

      this.start = start;
      this.end = end;
    }
  }, {
    key: "length",
    get: function get() {
      var end = this.end || 0;
      var start = this.start || 0;
      var diff = Math.max(0, end - start);
      return diff;
    }
  }, {
    key: "richNode",
    get: function get() {
      console.warn("[DEPRECATED] Property 'richNode' of RdfaBlock is deprecated. Please use 'richNodes' instead.");
      return this.richNodes;
    }
  }]);

  return RdfaBlock;
}();

exports.default = RdfaBlock;
module.exports = exports.default;