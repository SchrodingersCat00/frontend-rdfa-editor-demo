"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAllNodesOfType = exports.findFirstNodeOfType = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * Helpers for maintaining a DOM tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */

var _rdfaContextScanner = require("./rdfa-context-scanner");

/**
 * Finds the first dom node with the supplied type
 *
 * @method findFirstNodeOfType
 *
 * @param {DomNode} DomNode Highest level DOM node
 * @param {string} type URI of the type which should be matched
 *
 * @return {DomNode} Dom Node which has the correct type
 */
function findFirstNodeOfType(node, type) {
  var orderedContexts = (0, _rdfaContextScanner.analyse)(node);
  for (var idx = 0; idx < orderedContexts.length; idx++) {
    var ctxObj = orderedContexts[idx];
    for (var cdx = 0; cdx < ctxObj.context.length; cdx++) {
      var triple = ctxObj.context[cdx];
      if (triple.predicate === "a" && triple.object === type) return ctxObj.semanticNode.domNode;
    }
  }
  console.log("Could not find resource of type " + type);
  return null;
}

/**
 * Finds all dom nodes with the supplied type
 *
 * @method findAllNodesOfType
 *
 * @param {DomNode} DomNode Highest level DOM node
 * @param {string} type URI of the type which should be matched
 *
 * @return {[DomNode]} Dom Nodes which have the correct type
 */
function findAllNodesOfType(node, type) {
  var _analyseContexts = (0, _rdfaContextScanner.analyse)(node),
      _analyseContexts2 = _slicedToArray(_analyseContexts, 1),
      richNode = _analyseContexts2[0].semanticNode;

  var matchingNodes = [];

  var processItem = function processItem(richNode) {
    if (richNode.rdfaAttributes.typeof.includes(type)) matchingNodes.push(richNode);
  };

  var walk = function walk(richNode, functor) {
    functor(richNode);
    (richNode.children || []).forEach(function (child) {
      return walk(child, functor);
    });
  };

  walk(richNode, processItem);

  return matchingNodes.map(function (richNode) {
    return richNode.domNode;
  });
}

exports.findFirstNodeOfType = findFirstNodeOfType;
exports.findAllNodesOfType = findAllNodesOfType;