'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _rangeHelpers = require('./range-helpers');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Represents an enriched DOM node.
 *
 * The DOM node is available in the 'domNode' property.
 *
 * @module editor-core
 * @class RichNode
 * @constructor
 */
var RichNode = function () {
  function RichNode(content) {
    _classCallCheck(this, RichNode);

    for (var key in content) {
      this[key] = content[key];
    }
  }

  _createClass(RichNode, [{
    key: 'isInRegion',
    value: function isInRegion(start, end) {
      return start <= this.start && this.end <= end;
    }
  }, {
    key: 'isPartiallyInRegion',
    value: function isPartiallyInRegion(start, end) {
      return this.start >= start && this.start < end || this.end > start && this.end <= end;
    }
  }, {
    key: 'isPartiallyOrFullyInRegion',
    value: function isPartiallyOrFullyInRegion(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          start = _ref2[0],
          end = _ref2[1];

      if (start == undefined || end == undefined) return true;
      return this.start >= start && this.start <= end || this.end >= start && this.end <= end || this.start <= start && end <= this.end;
    }
  }, {
    key: 'partiallyOrFullyContainsRegion',
    value: function partiallyOrFullyContainsRegion(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          start = _ref4[0],
          end = _ref4[1];

      return (0, _rangeHelpers.positionInRange)(start, this.region) || (0, _rangeHelpers.positionInRange)(end, this.region);
    }
  }, {
    key: 'containsRegion',
    value: function containsRegion(start, end) {
      return this.start <= start && end <= this.end;
    }
  }, {
    key: 'isAncestorOf',
    value: function isAncestorOf(richNode) {
      var node = richNode;

      while (node) {
        if (this.domNode == node.domNode) return true;

        node = node.parent;
      }

      return false;
    }
  }, {
    key: 'isDescendentOf',
    value: function isDescendentOf(richNode) {
      return richNode.isAncestorOf(this);
    }
  }, {
    key: 'region',
    get: function get() {
      var start = this.start;
      var end = this.end;

      return [start, end || start];
    },
    set: function set(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 2),
          start = _ref6[0],
          end = _ref6[1];

      this.start = start;
      this.end = end;
    }
  }, {
    key: 'length',
    get: function get() {
      var end = this.end || 0;
      var start = this.start || 0;
      var diff = Math.max(0, end - start);
      return diff;
    }
  }]);

  return RichNode;
}();

exports.default = RichNode;
module.exports = exports.default;